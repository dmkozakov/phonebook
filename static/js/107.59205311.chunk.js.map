{"version":3,"file":"static/js/107.59205311.chunk.js","mappings":"kPAmBaA,EAAQ,SAAC,GAAyC,EAAvCC,MAAwC,IAA9BC,GAA6B,YAC7D,GAAgBC,EAAAA,EAAAA,IAASD,GAAlBE,GAAP,eAEA,OAAO,SAAC,KAAD,kBAAeA,GAAWF,GAClC,C,sJChBKG,EAAgB,CACpBC,MAAO,GACPC,SAAU,IAGG,SAASC,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MAUjB,OACE,SAAC,IAAD,CACEC,SAAS,KACTC,GAAI,CACFC,QAAS,OACTC,eAAgB,UAJpB,UAOE,SAAC,IAAD,CAAKF,GAAI,CAAEG,GAAI,GAAf,UACE,SAAC,KAAD,CAAQV,cAAeA,EAAeW,SAjBvB,SACnBC,EADmB,GAGf,IADFC,EACC,EADDA,UAEFT,GAASU,EAAAA,EAAAA,IAAMF,IACfC,GACD,EAWK,UACE,UAAC,KAAD,CACEE,MAAO,CACLP,QAAS,OACTQ,cAAe,SACfC,IAAK,GACLC,MAAO,KALX,WAQE,SAAC,EAAAC,EAAD,CACEC,GAAG,iBACHxB,MAAM,QACNyB,QAAQ,WACRC,KAAK,QACLC,KAAK,QACLC,KAAK,QACLC,UAAQ,KAEV,SAAC,EAAAN,EAAD,CACEC,GAAG,iBACHxB,MAAM,WACNyB,QAAQ,WACRC,KAAK,WACLC,KAAK,WACLC,KAAK,QACLC,UAAQ,KAEV,SAAC,IAAD,CACEJ,QAAQ,YACRd,GAAI,CAAEmB,GAAI,EAAGC,MAAO,QAASnB,QAAS,SACtCc,KAAK,SAHP,SAIC,kBAQZ,C","sources":["components/Input/Input.tsx","pages/Login.tsx"],"sourcesContent":["import { TextField } from '@mui/material';\nimport { useField } from 'formik';\n\ntype InputProps = {\n  label: string;\n  name: string;\n  // validate?: (value: any) => undefined | string | Promise<any>;\n  type?: string;\n  // multiple?: boolean;\n  value?: string;\n  size: 'small' | 'medium' | undefined;\n  variant?: 'outlined' | 'standard' | 'filled';\n  title?: string;\n  required?: boolean;\n  pattern?: string;\n  id?: string;\n  sx?: any;\n};\n\nexport const Input = ({ label, ...otherProps }: InputProps) => {\n  const [field] = useField(otherProps);\n\n  return <TextField {...field} {...otherProps} />;\n};\n","import { Box, Button, Container } from '@mui/material';\nimport { Input } from 'components/Input/Input';\nimport { Formik, Form, FormikHelpers } from 'formik';\nimport { IUserCredentials } from 'interfaces/IUser';\nimport { login } from 'redux/auth/operations';\nimport { useAppDispatch } from 'redux/hooks';\n\nconst initialValues = {\n  email: '',\n  password: '',\n} as IUserCredentials;\n\nexport default function Login() {\n  const dispatch = useAppDispatch();\n\n  const handleSubmit = (\n    user: IUserCredentials,\n    { resetForm }: FormikHelpers<IUserCredentials>\n  ) => {\n    dispatch(login(user));\n    resetForm();\n  };\n\n  return (\n    <Container\n      maxWidth=\"xl\"\n      sx={{\n        display: 'flex',\n        justifyContent: 'center',\n      }}\n    >\n      <Box sx={{ mt: 3 }}>\n        <Formik initialValues={initialValues} onSubmit={handleSubmit}>\n          <Form\n            style={{\n              display: 'flex',\n              flexDirection: 'column',\n              gap: 12,\n              width: 300,\n            }}\n          >\n            <Input\n              id=\"outlined-basic\"\n              label=\"Email\"\n              variant=\"outlined\"\n              type=\"email\"\n              name=\"email\"\n              size=\"small\"\n              required\n            />\n            <Input\n              id=\"outlined-basic\"\n              label=\"Password\"\n              variant=\"outlined\"\n              type=\"password\"\n              name=\"password\"\n              size=\"small\"\n              required\n            />\n            <Button\n              variant=\"contained\"\n              sx={{ my: 0, color: 'white', display: 'block' }}\n              type=\"submit\"\n            >\n              Login\n            </Button>\n          </Form>\n        </Formik>\n      </Box>\n    </Container>\n  );\n}\n"],"names":["Input","label","otherProps","useField","field","initialValues","email","password","Login","dispatch","useAppDispatch","maxWidth","sx","display","justifyContent","mt","onSubmit","user","resetForm","login","style","flexDirection","gap","width","I","id","variant","type","name","size","required","my","color"],"sourceRoot":""}