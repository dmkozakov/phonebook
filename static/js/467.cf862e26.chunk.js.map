{"version":3,"file":"static/js/467.cf862e26.chunk.js","mappings":"6RAEaA,E,QAAyBC,EAAAA,EAAH,2D,mBCQ7BC,EAASC,EAAAA,GACL,CACNC,KAAMD,EAAAA,KAEHE,QACC,yHACA,0IAEDC,WACHC,MAAOJ,EAAAA,KAGJE,QACC,mDACA,8CAEDC,WACHE,SAAUL,EAAAA,KAEPM,IAAI,EAAG,0CACPH,aAEJA,WAEGI,EAAgB,CACpBN,KAAM,GACNG,MAAO,GACPC,SAAU,IAGG,SAASG,IAAU,IAAD,MAC/B,GAIIC,EAAAA,EAAAA,IAAQ,CAAEC,UAAUC,EAAAA,EAAAA,GAAYZ,GAASa,cAAeL,IAH1DM,EADF,EACEA,SACAC,EAFF,EAEEA,aACaC,EAHf,EAGEC,UAAaD,OAGTE,GAAWC,EAAAA,EAAAA,MAMjB,OACE,SAACC,EAAA,EAAD,CACEC,SAAS,KACTC,GAAI,CACFC,QAAS,OACTC,eAAgB,UAJpB,UAOE,SAACC,EAAA,EAAD,CACEC,UAAU,OACVJ,GAAI,CAAEK,GAAI,GACVC,SAAUb,GAfC,SAACc,GAChBX,GAASY,EAAAA,EAAAA,IAAaD,GACvB,IAcKE,YAAU,EAJZ,UAME,UAACN,EAAA,EAAD,CACEC,UAAU,MACVM,MAAO,CACLT,QAAS,OACTU,cAAe,SACfC,IAAK,GACLC,MAAO,KANX,WASE,SAACC,EAAA,GAAD,gBACEC,GAAG,iBACHC,MAAM,OACNC,QAAQ,WACRC,KAAK,OACLC,KAAK,SACD3B,EAAS,SANf,IAOEV,UAAQ,KAETY,EAAOd,OACN,SAACJ,EAAD,oBACGkB,EAAOd,YADV,aACG,EAAawC,WAGlB,SAACN,EAAA,GAAD,gBACEC,GAAG,iBACHC,MAAM,QACNC,QAAQ,WACRC,KAAK,QACLC,KAAK,SACD3B,EAAS,UANf,IAOEV,UAAQ,KAETY,EAAOX,QACN,SAACP,EAAD,oBACGkB,EAAOX,aADV,aACG,EAAcqC,WAInB,SAACN,EAAA,GAAD,gBACEC,GAAG,iBACHC,MAAM,WACNC,QAAQ,WACRC,KAAK,WACLC,KAAK,SACD3B,EAAS,aANf,IAOEV,UAAQ,KAETY,EAAOV,WACN,SAACR,EAAD,oBACGkB,EAAOV,gBADV,aACG,EAAiBoC,WAItB,SAACC,EAAA,EAAD,CACEH,KAAK,SACLD,QAAQ,YACRjB,GAAI,CAAEsB,GAAI,EAAGC,MAAO,QAAStB,QAAS,SAHxC,SAIC,kBAOV,C","sources":["components/Auth/Auth.styled.tsx","pages/SignUp.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ValidationErrorMessage = styled.p`\n  font-size: 12px;\n  color: red;\n`;\n","import { useForm } from 'react-hook-form';\nimport { Box, Button, Container, TextField } from '@mui/material';\nimport { register as registerUser } from 'redux/auth/operations';\n\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { ValidationErrorMessage } from 'components/Auth/Auth.styled';\nimport { useAppDispatch } from 'redux/hooks';\nimport { IUserCredentials } from 'interfaces/IUser';\n\nconst schema = yup\n  .object({\n    name: yup\n      .string()\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      )\n      .required(),\n    email: yup\n      .string()\n\n      .matches(\n        /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n        'Email may contain only letters and numbers'\n      )\n      .required(),\n    password: yup\n      .string()\n      .min(7, 'Password must be at least 7 characters')\n      .required(),\n  })\n  .required();\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nexport default function SignUp() {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({ resolver: yupResolver(schema), defaultValues: initialValues });\n\n  const dispatch = useAppDispatch();\n\n  const onSubmit = (data: IUserCredentials) => {\n    dispatch(registerUser(data));\n  };\n\n  return (\n    <Container\n      maxWidth=\"xl\"\n      sx={{\n        display: 'flex',\n        justifyContent: 'center',\n      }}\n    >\n      <Box\n        component=\"form\"\n        sx={{ mt: 3 }}\n        onSubmit={handleSubmit(onSubmit)}\n        noValidate\n      >\n        <Box\n          component=\"div\"\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: 12,\n            width: 300,\n          }}\n        >\n          <TextField\n            id=\"outlined-basic\"\n            label=\"Name\"\n            variant=\"outlined\"\n            type=\"name\"\n            size=\"small\"\n            {...register('name')}\n            required\n          />\n          {errors.name && (\n            <ValidationErrorMessage>\n              {errors.name?.message}\n            </ValidationErrorMessage>\n          )}\n          <TextField\n            id=\"outlined-basic\"\n            label=\"Email\"\n            variant=\"outlined\"\n            type=\"email\"\n            size=\"small\"\n            {...register('email')}\n            required\n          />\n          {errors.email && (\n            <ValidationErrorMessage>\n              {errors.email?.message}\n            </ValidationErrorMessage>\n          )}\n\n          <TextField\n            id=\"outlined-basic\"\n            label=\"Password\"\n            variant=\"outlined\"\n            type=\"password\"\n            size=\"small\"\n            {...register('password')}\n            required\n          />\n          {errors.password && (\n            <ValidationErrorMessage>\n              {errors.password?.message}\n            </ValidationErrorMessage>\n          )}\n\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            sx={{ my: 0, color: 'white', display: 'block' }}\n          >\n            Sign up\n          </Button>\n        </Box>\n      </Box>\n    </Container>\n  );\n}\n"],"names":["ValidationErrorMessage","styled","schema","yup","name","matches","required","email","password","min","initialValues","SignUp","useForm","resolver","yupResolver","defaultValues","register","handleSubmit","errors","formState","dispatch","useAppDispatch","Container","maxWidth","sx","display","justifyContent","Box","component","mt","onSubmit","data","registerUser","noValidate","style","flexDirection","gap","width","TextField","id","label","variant","type","size","message","Button","my","color"],"sourceRoot":""}